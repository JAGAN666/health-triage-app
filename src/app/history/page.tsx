"use client";

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  ArrowLeft, 
  Calendar, 
  FileText, 
  Search, 
  Download,
  Trash2,
  Eye,
  MessageSquare,
  Clock
} from "lucide-react";
import Link from "next/link";
import RiskAssessment from "@/components/triage/RiskAssessment";

interface TriageSession {
  id: string;
  symptoms: string;
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';
  rationale: string;
  actionPlan: string[];
  messages: Array<{
    content: string;
    sender: 'user' | 'ai';
    timestamp: string;
  }>;
  createdAt: string;
  updatedAt: string;
}

export default function HistoryPage() {
  const [sessions, setSessions] = useState<TriageSession[]>([]);
  const [filteredSessions, setFilteredSessions] = useState<TriageSession[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [riskFilter, setRiskFilter] = useState<string>('all');
  const [selectedSession, setSelectedSession] = useState<TriageSession | null>(null);

  useEffect(() => {
    loadSessionsFromStorage();
  }, []);

  useEffect(() => {
    filterSessions();
  }, [sessions, searchTerm, riskFilter]);

  const loadSessionsFromStorage = () => {
    try {
      const stored = localStorage.getItem('triageSessions');
      if (stored) {
        const parsed = JSON.parse(stored);
        setSessions(parsed);
      }
      setLoading(false);
    } catch (error) {
      console.error('Error loading sessions:', error);
      setLoading(false);
    }
  };

  const filterSessions = () => {
    let filtered = sessions;

    if (searchTerm) {
      filtered = filtered.filter(session =>
        session.symptoms.toLowerCase().includes(searchTerm.toLowerCase()) ||
        session.rationale.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (riskFilter !== 'all') {
      filtered = filtered.filter(session => session.riskLevel === riskFilter);
    }

    // Sort by most recent first
    filtered = filtered.sort((a, b) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );

    setFilteredSessions(filtered);
  };

  const deleteSession = (sessionId: string) => {
    if (confirm('Are you sure you want to delete this triage session?')) {
      const updated = sessions.filter(s => s.id !== sessionId);
      setSessions(updated);
      localStorage.setItem('triageSessions', JSON.stringify(updated));
    }
  };

  const exportSessionToPDF = (session: TriageSession) => {
    // Basic PDF export functionality
    const content = `
TRIAGE SESSION REPORT
Date: ${new Date(session.createdAt).toLocaleDateString()}

SYMPTOMS:
${session.symptoms}

RISK ASSESSMENT: ${session.riskLevel}
Rationale: ${session.rationale}

ACTION PLAN:
${session.actionPlan.map(action => `â€¢ ${action}`).join('\n')}

CONVERSATION HISTORY:
${session.messages.map(msg => 
  `${msg.sender.toUpperCase()}: ${msg.content}`
).join('\n\n')}

---
Generated by HealthTriage AI
This is not medical advice. Consult healthcare professionals for medical decisions.
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `triage-session-${new Date(session.createdAt).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const formatDate = (dateStr: string) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'LOW': return 'bg-green-100 text-green-800 border-green-200';
      case 'MEDIUM': return 'bg-amber-100 text-amber-800 border-amber-200';
      case 'HIGH': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>Loading your history...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Link href="/">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back
              </Button>
            </Link>
            <div>
              <h1 className="text-xl font-semibold">Triage History</h1>
              <p className="text-sm text-gray-600">View and manage your past health assessments</p>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Search and Filters */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Search symptoms or assessments..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
              
              <Select value={riskFilter} onValueChange={setRiskFilter}>
                <SelectTrigger className="w-full sm:w-40">
                  <SelectValue placeholder="Filter by risk" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Risks</SelectItem>
                  <SelectItem value="LOW">Low Risk</SelectItem>
                  <SelectItem value="MEDIUM">Medium Risk</SelectItem>
                  <SelectItem value="HIGH">High Risk</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Sessions List or Detail View */}
        {selectedSession ? (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Session Details</CardTitle>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setSelectedSession(null)}
                  >
                    Back to List
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <p className="text-sm text-gray-600">Date:</p>
                    <p className="font-medium">{formatDate(selectedSession.createdAt)}</p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-gray-600">Symptoms:</p>
                    <p className="bg-gray-50 p-3 rounded-md">{selectedSession.symptoms}</p>
                  </div>

                  <div>
                    <p className="text-sm text-gray-600 mb-2">Conversation:</p>
                    <div className="bg-gray-50 p-4 rounded-md max-h-60 overflow-y-auto space-y-3">
                      {selectedSession.messages.map((message, index) => (
                        <div key={index} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                          <div className={`max-w-[80%] p-2 rounded-lg text-sm ${
                            message.sender === 'user'
                              ? 'bg-blue-600 text-white'
                              : 'bg-white border'
                          }`}>
                            {message.content}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <RiskAssessment
              riskLevel={selectedSession.riskLevel}
              rationale={selectedSession.rationale}
              actionPlan={selectedSession.actionPlan}
              timestamp={new Date(selectedSession.createdAt)}
              onExportPDF={() => exportSessionToPDF(selectedSession)}
            />
          </div>
        ) : (
          <div className="space-y-4">
            {filteredSessions.length === 0 ? (
              <Card>
                <CardContent className="p-8 text-center">
                  <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">No triage sessions found</h3>
                  <p className="text-gray-600 mb-4">
                    {sessions.length === 0 
                      ? "You haven't completed any health assessments yet."
                      : "No sessions match your current search criteria."
                    }
                  </p>
                  <Link href="/symptom-checker">
                    <Button>Start Your First Assessment</Button>
                  </Link>
                </CardContent>
              </Card>
            ) : (
              filteredSessions.map((session) => (
                <Card key={session.id} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <Badge className={getRiskColor(session.riskLevel)}>
                            {session.riskLevel} Risk
                          </Badge>
                          <span className="text-sm text-gray-500">
                            {formatDate(session.createdAt)}
                          </span>
                        </div>
                        
                        <h3 className="font-medium mb-2">Symptoms Assessed</h3>
                        <p className="text-sm text-gray-600 line-clamp-2 mb-2">
                          {session.symptoms}
                        </p>
                        
                        <div className="flex items-center gap-4 text-sm text-gray-500">
                          <span className="flex items-center gap-1">
                            <MessageSquare className="w-4 h-4" />
                            {session.messages.length} messages
                          </span>
                          <span className="flex items-center gap-1">
                            <Clock className="w-4 h-4" />
                            Updated {formatDate(session.updatedAt)}
                          </span>
                        </div>
                      </div>
                    </div>

                    <div className="flex flex-wrap gap-2">
                      <Button
                        size="sm"
                        onClick={() => setSelectedSession(session)}
                      >
                        <Eye className="w-4 h-4 mr-2" />
                        View Details
                      </Button>
                      
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => exportSessionToPDF(session)}
                      >
                        <Download className="w-4 h-4 mr-2" />
                        Export
                      </Button>
                      
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => deleteSession(session.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="w-4 h-4 mr-2" />
                        Delete
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        )}
      </div>
    </div>
  );
}