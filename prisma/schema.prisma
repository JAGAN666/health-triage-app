generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String?            @unique
  name              String?
  password          String?
  role              String             @default("patient")
  language          String             @default("en")
  location          String?
  phone             String?
  dateOfBirth       DateTime?
  gender            String?
  bloodType         String?
  allergies         String?
  medications       String?
  medicalHistory    String?
  emergencyContact  String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  appointments      Appointment[]
  emergencyContacts EmergencyContact[]
  healthMetrics     HealthMetric[]
  moodEntries       MoodEntry[]
  sessions          Session[]
  triageSessions    TriageSession[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model TriageSession {
  id         String    @id @default(cuid())
  userId     String?
  symptoms   String
  riskLevel  RiskLevel
  rationale  String
  actionPlan String
  messages   String
  language   String    @default("en")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id])

  @@map("triage_sessions")
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  mood      Int
  notes     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("mood_entries")
}

model Resource {
  id        String       @id @default(cuid())
  name      String
  type      ResourceType
  address   String?
  phone     String?
  website   String?
  latitude  Float?
  longitude Float?
  hours     String?
  cost      String?
  zipCode   String?
  city      String?
  state     String?
  country   String       @default("US")
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("resources")
}

model Provider {
  id             String        @id @default(cuid())
  name           String
  specialty      String
  rating         Float         @default(0)
  reviewCount    Int           @default(0)
  experience     Int
  languages      String
  availability   String
  hourlyRate     Float?
  bio            String?
  education      String?
  certifications String?
  isVerified     Boolean       @default(false)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointments   Appointment[]

  @@map("providers")
}

model Appointment {
  id           String            @id @default(cuid())
  userId       String
  providerId   String
  dateTime     DateTime
  duration     Int               @default(30)
  type         String            @default("consultation")
  status       AppointmentStatus @default(SCHEDULED)
  notes        String?
  meetingLink  String?
  cost         Float?
  diagnosis    String?
  prescription String?
  followUpDate DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  provider     Provider          @relation(fields: [providerId], references: [id])
  user         User              @relation(fields: [userId], references: [id])

  @@map("appointments")
}

model HealthMetric {
  id         String     @id @default(cuid())
  userId     String
  type       MetricType
  value      Float
  unit       String
  notes      String?
  recordedAt DateTime   @default(now())
  source     String     @default("manual")
  user       User       @relation(fields: [userId], references: [id])

  @@map("health_metrics")
}

model EmergencyContact {
  id           String   @id @default(cuid())
  userId       String
  name         String
  relationship String
  phone        String
  email        String?
  address      String?
  isPrimary    Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("emergency_contacts")
}

model HealthInsight {
  id          String      @id @default(cuid())
  userId      String?
  type        InsightType
  title       String
  description String
  severity    String      @default("info")
  actionItems String
  isRead      Boolean     @default(false)
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())

  @@map("health_insights")
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MetricType {
  BLOOD_PRESSURE_SYSTOLIC
  BLOOD_PRESSURE_DIASTOLIC
  HEART_RATE
  TEMPERATURE
  WEIGHT
  HEIGHT
  BMI
  BLOOD_GLUCOSE
  OXYGEN_SATURATION
  STEPS
  SLEEP_HOURS
  MOOD_SCORE
}

enum InsightType {
  HEALTH_TREND
  RISK_ALERT
  MEDICATION_REMINDER
  APPOINTMENT_REMINDER
  LIFESTYLE_RECOMMENDATION
  PREVENTIVE_CARE
}

enum ResourceType {
  CLINIC
  HOSPITAL
  PHARMACY
  HOTLINE
  MENTAL_HEALTH
}
